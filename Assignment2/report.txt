"Strace -c"

bash script:
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 97.92    0.042868       10717         4         1 wait4
  0.56    0.000244           3        68        47 openat
  0.24    0.000104          34         3           clone
  0.19    0.000085           3        23           mmap
  0.18    0.000078           5        15         7 stat
  0.17    0.000073           2        29         4 close
  0.12    0.000052           2        20           fstat
  0.11    0.000049           2        17           rt_sigprocmask
  0.09    0.000039           4         8           mprotect
  0.08    0.000035           2        16           rt_sigaction
  0.08    0.000034           3         9           read
  0.04    0.000018           4         4           brk
  0.03    0.000011          11         1         1 access
  0.02    0.000010          10         1           execve
  0.02    0.000009           2         4           lseek
  0.02    0.000009           9         1           munmap
  0.02    0.000008           2         3         2 ioctl
  0.02    0.000008           4         2           pipe
  0.01    0.000006           6         1           rt_sigreturn
  0.01    0.000006           2         3         1 fcntl
  0.01    0.000004           4         1           dup2
  0.01    0.000004           2         2           getpid
  0.01    0.000004           2         2           prlimit64
  0.01    0.000003           3         1           sysinfo
  0.00    0.000002           2         1           uname
  0.00    0.000002           2         1           getuid
  0.00    0.000002           2         1           getgid
  0.00    0.000002           2         1           geteuid
  0.00    0.000002           2         1           getegid
  0.00    0.000002           2         1           getppid
  0.00    0.000002           2         1           getpgrp
  0.00    0.000002           2         1           arch_prctl
------ ----------- ----------- --------- --------- ----------------
100.00    0.043777                   246        63 total


c code:
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 96.92    0.058773       58773         1           wait4
  1.30    0.000791          31        25           read
  0.80    0.000488          18        26         7 stat
  0.25    0.000150           8        18        16 openat
  0.19    0.000114          10        11           write
  0.11    0.000065          65         1           clone
  0.09    0.000052          10         5           mmap
  0.08    0.000049          12         4           mprotect
  0.06    0.000036           9         4           close
  0.05    0.000028           7         4           fstat
  0.05    0.000028           7         4           brk
  0.03    0.000021          21         1           munmap
  0.02    0.000012          12         1           pipe2
  0.02    0.000011          11         1         1 access
  0.02    0.000011          11         1           execve
  0.01    0.000007           7         1           arch_prctl
  0.01    0.000006           6         1           fcntl
------ ----------- ----------- --------- --------- ----------------
100.00    0.060642                   109        24 total

Time:

bash script:
real	0m0.182s
user	0m0.013s
sys	0m0.041s

c code:
real	0m0.192s
user	0m0.006s
sys	0m0.031s

Description:
Overall it seem that the c code would run faster than the bash script. In terms of preformance, they aren't really comparable. Bash is a true interperted language, and the shell makes little attmept
to do any sort of "compilation". In most cases C code (if written well and optimized) can run multiple times faster than a bash script. 

